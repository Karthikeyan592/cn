((sender))

import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((socket.gethostname(), 65456))
s.settimeout(2)

#FLAG and ESC
FLAG = '01111110'
ESC = '10100011'

dFile = open('data.txt', 'r')  #Opening the text file
data = dFile.read()  #Reading and storing the data

#bytestuffing the data
data = data.replace("ESC", "ESC ESC")
data = data.replace("FLAG", "ESC FLAG")

#byteEncoding the data
binaryCode = []
for i in data.split():
    if i == 'ESC':
        binaryCode.append(ESC)
    elif i == 'FLAG':
        binaryCode.append(FLAG)
    else:
        binaryCode.append(format(ord(i), '08b'))
binaryCode = ' '.join(binaryCode)

#bitStuffing the data '011111' to '0111110'
binaryCode = binaryCode.replace('011111', '0111110').split()

#hammingCoding the data
binaryCode = [
    ''.join(binaryCode[i:i + 4])
    for i in range(0, len(binaryCode), 4)  #Grouping four 8bitstrings into one
]

hammingedCode = []  #Hamming
for tt in binaryCode:
    dataW = [int(x) for x in tt]
    dataW.reverse()
    m = len(dataW)
    r = 1

    while 2**r < m + r + 1:
        r += 1

    for i in range(r):
        dataW.insert(2**i - 1, 0)

    for i in range(r):
        j = 2**i
        value = 0
        while j < len(dataW) + 1:
            value ^= dataW[j - 1]
            if (j + 1) % (2**i) == 0:
                j += 2**i
            j += 1
        dataW[2**i - 1] = value
    dataWstr = [str(x) for x in dataW]
    dataWstr = ''.join(dataWstr)
    hammingedCode.append(dataWstr)

#Framing the data after applying HammingCode
framedCode = [FLAG + i + FLAG for i in hammingedCode]

#Sequencing the Frames
seqNo = 0
frameSeq = []
for i in range(len(framedCode)):
    frameSeq.append(str(seqNo))
    seqNo = 1 if seqNo == 0 else 0
# s.send(framedCode.encode())

sn = 0
canSend = True

while (sn < len(frameSeq)):
    s.send(framedCode[sn].encode())
    print(f"Sent {sn+1}th frame.")
    sn += 1
    if sn == len(frameSeq):
        break
    else:
        if (s.recv(1024).decode() == frameSeq[sn]):
            print(f"ACK {frameSeq[sn]} received.")
        else:
            print("Transmission failed. Retransmitting...")
            sn -= 1


((Receiver))

import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((socket.gethostname(), 65456))
s.listen(5)

c, addr = s.accept()

frameSeq = [0, 1, 0]
rn = 0
sawCode = []

while rn < len(frameSeq):
    byte = c.recv(1024).decode()
    sawCode.append(byte)
    rn += 1
    if rn >= len(frameSeq):
        print("Received all frames")
        break
    else:
        print(f"Sending ACK {frameSeq[rn]}")
        c.send(str(frameSeq[rn]).encode())

# framedCode = c.recv(1024).decode()

#FLAG and ESC
FLAG = '01111110'
ESC = '10100011'

print(sawCode)

#Unframing
# framedCode = framedCode.replace(FLAG, ' ').split()
framedCode = ''.join(sawCode).replace(FLAG, ' ').split()

#HammingCorrection
unHammedCode = []
for frame in framedCode:
    dataW = [int(x) for x in frame]
    n = len(dataW)
    r = 1
    while 2**r < n + 1:
        r += 1
    errBit = 0
    for i in range(r):
        j = 2**i
        value = 0
        while j < len(dataW) + 1:
            value ^= dataW[j - 1]
            if (j + 1) % (2**i) == 0:
                j += 2**i
            j += 1
        if value % 2 == 1:
            errBit += 2**i

    if errBit:
        print('Error at bit position:', errBit)
        dataW[errBit - 1] ^= 1  #correction of the errorBit
        print('and the correct code is ' + "".join([str(x) for x in dataW]))
    else:
        print('Frame is error free.')
    removalIndex = []
    for i in range(r):
        removalIndex.append(2**i - 1)
    newDataW = []
    for i in range(len(dataW)):
        if i not in removalIndex:
            newDataW.append(dataW[i])
    dataW = newDataW
    dataW.reverse()
    dataW = [str(x) for x in dataW]
    unHammedCode.append(''.join(dataW))

#Unbitstuffing the data
unHammedCode = ''.join(unHammedCode)
unHammedCode = unHammedCode.replace('0111110', '011111')

#Degrouping the 4 8bit binaries to singles
degroupedCode = [unHammedCode[i:i + 8] for i in range(0, len(unHammedCode), 8)]

#byteDecoding the message
byteDecodedCode = []
for byte in degroupedCode:
    if byte == ESC:
        byteDecodedCode.append('ESC')
    elif byte == FLAG:
        byteDecodedCode.append('FLAG')
    else:
        byteDecodedCode.append(chr(int(byte, 2)))
byteDecodedCode = ' '.join(byteDecodedCode)

#byte Unstufffing
byteDecodedCode = byteDecodedCode.replace('ESC ESC', 'ESC')
byteDecodedCode = byteDecodedCode.replace('ESC FLAG', 'FLAG')

print("MESSAGE RECIEVED : ", byteDecodedCode)

-------------------------------------------------------------------------------------------------------
CRC

((Sender))

import socket

c = socket.socket()
c.connect(('localhost', 65456))

KEY = [1, 0, 1, 1]
dataFile = open('./data.txt', 'r')
data = dataFile.read().split()

d = len(data[0])
r = len(KEY) - 1

#CRC
crcdCode = []
for byte in data:
    oneByte = [int(x) for x in byte]
    dividend = []
    for i in range(len(oneByte)):
        dividend.append(oneByte[i])
    for i in range(r):
        dividend.append(0)
    for i in range(len(oneByte)):
        if dividend[i] == 1:
            for j in range(r + 1):
                dividend[i + j] ^= KEY[j]
    rem = dividend[len(dividend) - r:]
    codeW = oneByte + rem
    codeW = [str(x) for x in codeW]
    crcdCode.append(''.join(codeW))

crcdCode = ' '.join(crcdCode)

c.send(crcdCode.encode())

c.close()

((Receiver))

from re import S
import socket

KEY = [1, 0, 1, 1]

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('localhost', 65456))
s.listen(5)
print("[SERVER] Listening...")

server, addr = s.accept()

crcdCode = server.recv(1024).decode().split()
r = len(KEY) - 1
d = len(crcdCode[0]) - r

for byte in crcdCode:
    print(byte, end="")
    oneByte = [int(x) for x in byte]
    for i in range(d):
        if oneByte[i] == 1:
            for j in range(r + 1):
                oneByte[i + j] ^= KEY[j]
    rem = oneByte[len(oneByte) - r:]
    for bit in rem:
        if bit != 0:
            print(" 👎", end="")
            break
    else:
        print(" 👍", end="")
    print()
--------------------------------------------------------------------------------------------